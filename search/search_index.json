{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#django-ninja-aio-crud-rest-framework","title":"Django Ninja Aio CRUD - Rest Framework","text":"<p>Django Ninja Aio CRUD is a web framework based on Django Ninja framework(developed by Vitaliy Kucheryaviy). It comes out from the purpose to make fast coding async CRUD operations. It comes out with built-in views, model and some utilities like JWT authentication class.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install django-ninja-aio-crud\n</code></pre>"},{"location":"#quick-usage-example","title":"Quick Usage Example","text":"<p>Start a new Django project and define your models using ModelSerializer class</p> <pre><code># models.py\nfrom django.db import models\nfrom ninja_aio.models import ModelSerializer\n\n\nclass Foo(ModelSerializer):\n  name = models.CharField(max_length=30)\n  bar = models.CharField(max_length=30)\n\n  class ReadSerializer:\n    fields = [\"id\", \"name\", \"bar\"]\n\n  class CreateSerializer:\n    fields = [\"name\", \"bar\"]\n\n  class UpdateSerializer:\n    fields = [\"name\", \"bar\"]\n</code></pre> <p>Define your CRUD views using APIViewSet class and your API with NinjaAIO class</p> <pre><code># views.py\nfrom ninja_aio import NinjaAIO\nfrom ninja_aio.views import APIViewSet\n\nfrom .models import Foo\n\napi = NinjaAIO()\n\n\nclass FooAPI(APIViewSet):\n  model = Foo\n  api = api\n\n\nFooAPI().add_views_to_route()\n</code></pre> <p>Add API paths to your urls <pre><code># urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nfrom api.views import api\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"api/\", api.urls)\n]\n</code></pre></p> <p>Now run your local server</p> <pre><code>python manage.py runserver\n</code></pre> <p>Go to http://localhost:8000/api/docs and see the result</p>"},{"location":"#swaggers-overview","title":"Swaggers Overview","text":""},{"location":"#list-swagger","title":"List Swagger","text":""},{"location":"#create-swagger","title":"Create Swagger","text":""},{"location":"#retrieve-swagger","title":"Retrieve Swagger","text":""},{"location":"#update-swagger","title":"Update Swagger","text":""},{"location":"#delete-swagger","title":"Delete Swagger","text":""},{"location":"models/model_util/","title":"Model Util","text":"<p>Model Util class is a NinjaAIO built-in utility class. It gives a lot of utilities for CRUD operations or normal Models operations. Let's give a look on its methods.</p>"},{"location":"models/model_util/#get_object","title":"get_object","text":"<p>Parameters:</p> <pre><code>request: HttpRequest\npk: int | str\n</code></pre> <p>Return:</p> <pre><code>Model | ModelSerializer\n</code></pre> <p>What it does:     This method prepares the object query and excutes it asynchronously. If the model is an instance of ModelSerializer it will execute actions defined into queryset_request method. It prepares queries also with prefetched relations using Model Util method get_reverse_relations, that is usefull to retrieve also the reverse relations and work with them asynchronously.</p> <p>Example</p> <pre><code># views.py\nfrom ninja import Schema\nfrom ninja_aio import NinjaAIO\nfrom ninja_aio.models import ModelUtil\nfrom ninja_aio.schemas import GenericMessageSchema\nfrom ninja_aio.views import APIView\nfrom django.http import HttpRequest\n\nfrom . import models\n\napi = NinjaAIO()\n\n\nclass FooSchemaOut(Schema):\n    id: int\n    name: str\n    active: bool\n\n\nclass FooRetrieveView(APIView):\n    api = api\n    api_route_path = \"foos/\"\n    router_tag = \"Retrieve Foo\"\n\n    def views(self):\n        @self.router.get(\n            \"{id}/\",\n            response={\n                200: FooSchemaOut,\n                self.error_codes: GenericMessageSchema,\n            },\n        )\n        async def retrieve_foo(request: HttpRequest, id: int):\n            foo_util = ModelUtil(models.Foo)\n            try:\n                foo = await foo_util.get_object(request, id)\n            except SerializeError as e:\n                return e.status_code, e.error\n            return 200, foo\n\n\nFooRetrieveView().add_views_to_route()\n</code></pre>"},{"location":"models/model_util/#get_reverse_relations","title":"get_reverse_relations","text":"<p>Parameters:     None</p> <p>Return:     list[str]</p> <p>What it does:     Retrieve all the reverse relations based on model's fields. If the model is instance of Model it will retrieve them on all model's fields, if it is instance of ModelSerializer it will retrieve them based on fields given into ReadSerializer. This method is called into get_object method also.</p> <p>Example</p> <pre><code># models.py\nfrom ninja_aio.models import ModelSerializer\nfrom django.db import models\n\n\nclass Foo(ModelSerializer):\n    name = models.CharField(max_length=30)\n\n    class ReadSerializer:\n    fields = [\"id\", \"name\", \"bars\"]\n\n    class CreateSerializer:\n    fields = [\"name\"]\n\n    class UpdateSerializer:\n    fields = [\"name\"]\n\n\nclass Bar(ModelSerializer):\n    name = models.CharField(max_length=30)\n    foo = models.ForeignKey(Foo, on_delete=models.CASCADE, related_name=\"bars\")\n\n    class ReadSerializer:\n    fields = [\"id\", \"name\", \"foo\"]\n\n    class CreateSerializer:\n    fields = [\"name\", \"foo\"]\n\n    class UpdateSerializer:\n    fields = [\"name\"]\n</code></pre> <p><pre><code># views.py\nfrom ninja import Schema\nfrom ninja_aio import NinjaAIO\nfrom ninja_aio.models import ModelUtil\nfrom ninja_aio.schemas import GenericMessageSchema\nfrom ninja_aio.views import APIView\nfrom django.http import HttpRequest\n\nfrom . import models\n\napi = NinjaAIO()\n\n\nclass RelationsSchemaOut(Schema):\n    relations: list[str]\n\n\nclass FooRelationsView(APIView):\n    api = api\n    api_route_path = \"foos/relations/\"\n    router_tag = \"Foo's Relations\"\n\n    def views(self):\n        @self.router.get(\n            \"/\",\n            response={\n                200: RelationsSchemaOut,\n                self.error_codes: GenericMessageSchema,\n            },\n        )\n        async def retrieve_foo(request: HttpRequest):\n            foo_util = ModelUtil(models.Foo)\n            return 200, foo_util.get_reverse_relations()\n\n\nFooRelationsView().add_views_to_route()\n</code></pre> </p>"}]}